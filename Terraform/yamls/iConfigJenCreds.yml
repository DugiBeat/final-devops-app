---
- hosts: all
  become: yes
  become_method: sudo
  vars:
    jenkins_url: "http://{{ ansible_host }}:8080"
    jenkins_admin_username: "admin"
  
  tasks:
    - name: Install required Python modules
      pip:
        name:
          - python-jenkins
          - lxml
        state: present

    - name: Install required Ansible collection for Jenkins
      shell: ansible-galaxy collection install community.general
      changed_when: false

    - name: Wait for Jenkins to initialize
      wait_for:
        path: /var/lib/jenkins/secrets/initialAdminPassword
        state: present
        delay: 3
        timeout: 120
      ignore_errors: yes
      register: jenkins_ready

    - name: Get Jenkins initial admin password
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_password
      ignore_errors: true
      when: jenkins_ready is succeeded

    - name: Ensure required Jenkins plugins are installed
      community.general.jenkins_plugin:
        name:
          - kubernetes
          - kubernetes-cli
          - pipeline-stage-view
        url: "{{ jenkins_url }}"
        username: "{{ jenkins_admin_username }}"
        password: "{{ jenkins_password.stdout }}"
        with_dependencies: yes
      register: plugin_result
      retries: 5
      delay: 10
      until: plugin_result is success
      ignore_errors: yes

    - name: Create AWS Access Key Credential
      community.general.jenkins_script:
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_admin_username }}"
        password: "{{ jenkins_admin_password }}"
        script: |
          import jenkins.model.*
          import hudson.util.Secret
          import com.cloudbees.plugins.credentials.impl.*
          import com.cloudbees.plugins.credentials.*
          import com.cloudbees.plugins.credentials.domains.*

          def store = Jenkins.instance.getExtensionList(
            'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
          )[0].getStore()

          def credentials = new StringCredentialsImpl(
            CredentialsScope.GLOBAL,
            "AWS_KEY",
            "AWS_S_KEY",
            Secret.fromString("{{ aws_access_key }}")
          )

          store.addCredentials(Domain.global(), credentials)


    - name: Create Git credentials
      community.general.jenkins_credential:
        url: "{{ jenkins_url }}"
        username: "{{ jenkins_admin_username }}"
        password: "{{ jenkins_password.stdout }}"
        credential_id: "GIT_CREDENTIALS"
        username_secret: "DugiBeat"
        password_secret: "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"
        description: "Git Username and Password"
        credential_type: "userpass"
        treat_username_as_secret: true
        scope: "GLOBAL"

    - name: Display Jenkins initial admin password
      debug:
        msg: "Jenkins initial admin password: {{ jenkins_password.stdout }}"
      when: jenkins_password is defined and jenkins_password.stdout is defined and jenkins_password.stdout != ""
